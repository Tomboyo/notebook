#!/bin/bash

set -euo pipefail

BASEDIR="$(realpath $(dirname "$0"))"
TARGETDIR="$BASEDIR/target"
BINDIR="$BASEDIR/bin"

function usage {
    echo "build [-c|--clean] [-s|--serve] [--preserve-pre]"
    echo "   or [-h|--help]"
    echo
    echo "Build the project."
    echo
    echo "  -c, --clean:   Delete the target directory before compiling."
    echo "  -s, --serve:   Start a python http.server instance in the target "
    echo "                 directoy to serve compiled documents."
    echo " --preserve-pre: Do not delete the target/pre directory after"
    echo "                 compilation. (Useful for debugging.)"
    echo
    echo "  -h, --help:    Display this message and exit."
    echo
}

function clean {
    echo "CLEAN $TARGETDIR"
    rm -rf "$TARGETDIR"
}

function build {
    echo "BUILD"
    if [[ ! -d ./target/pre ]] ; then
        mkdir -p target/pre
    fi
    cp src/adoc/*.adoc target/pre

    echo "PRECOMPILE"
    bin/precompile

    echo "COMPILE"
    find target/pre -type f -exec \
        asciidoctor -r asciidoctor-diagram -D target {} ';'
    
    if [[ ! "$PRESERVE_PRE" == "true" ]] ; then
        echo "POSTCOMPILE"
        rm -rf "$TARGETDIR/pre"
    fi
}

CLEAN=""
SERVE=""
PRESERVE_PRE=""
while [[ $# -gt 0 ]] ; do
    key="$1"
    case "$key" in
        -c|--clean)
            CLEAN="true"
            shift
            ;;
        -s|--serve)
            SERVE="true"
            shift
            ;;
        --preserve-pre)
            PRESERVE_PRE="true"
            shift
            ;;
        -h|--help)
            usage
            exit
            ;;
        *)
            echo "unexpected argument $1"
            usage
            exit 1
            ;;
    esac
done

if [[ "$CLEAN" == "true" ]] ; then
    clean
fi

build

if [[ "$SERVE" == "true" ]] ; then
    echo "SERVE"
    "$BINDIR/serve"
fi
